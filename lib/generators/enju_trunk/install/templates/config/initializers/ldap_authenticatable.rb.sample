require 'net/ldap'
require 'devise/strategies/authenticatable'

module Devise
  module Strategies
    class LdapAuthenticatable < Authenticatable
      def authenticate!
        Rails.logger.info "ldap auth : in LDAP Auth method"

        ldap_user_cn = ""

        if params[:user]
          Rails.logger.info "ldap auth : username=#{username}"

          if username == "admin"
            # bypass ldap auth if user is admin
            Rails.logger.info "ldap auth : bypass ldap auth"

            resource = valid_password? && mapping.to.find_for_database_authentication(authentication_hash)

            if validate(resource){ resource.valid_password?(password) }
              resource.after_database_authentication
              success!(resource)
            elsif !halted?
              fail(:invalid)
            end

            return
          end

          # TODO
          if password.blank?
            fail(:invalid)
            return
          end

          Rails.logger.info "ldap (1) : start."
          ldap_server_config = {
            host: SystemConfiguration.get("ldap.host"),
            port: SystemConfiguration.get("ldap.port"),
          }
          ldap = Net::LDAP.new(ldap_server_config)
          attrs = ["mail", "cn", "sn", "uid"]

          if SystemConfiguration.get("ldap.type") == "ldapbind"
            Rails.logger.info "ldap bind (2) : auth try."

            user_basedn = ""
            ldap_bind_username = username.dup

            ldap_search_auth = {
              :username => SystemConfiguration.get("ldap.search.auth.username"),
              :password => SystemConfiguration.get("ldap.search.auth.password"),
              :method   => :simple
            }

            ldap_search_server_config = ldap_server_config.merge({:auth => ldap_search_auth})
            ldap_search = Net::LDAP.new(ldap_search_server_config)
            ldap_search_treebase = SystemConfiguration.get("ldap.search.treebase")

            #Rails.logger.info "ldap_search_server_config=#{ldap_search_server_config} /ldap_search_treebase=#{ldap_search_treebase}"

            unless ldap_search.get_operation_result.code == 0
              # invalid parameter
              Rails.logger.info "unsuccess ldap_search (1) code=#{ldap_search.get_operation_result.code} error_message=#{ldap_search.get_operation_result.error_message} "
              fail(:invalid)
            end

            filter = Net::LDAP::Filter.eq("uid", username)
            ldap_search.search(:base => ldap_search_treebase, :filter => filter) do |entry|
              userbasedn = entry.dn
              #TODO array?
              ldap_user_cn = entry.cn.first
              Rails.logger.info "ldap_search (2) userbasedn=#{userbasedn}"
              #TODO
              ldap_bind_username = userbasedn
            end

            unless ldap_search.get_operation_result.code == 0
              # invalid parameter
              Rails.logger.info "unsuccess ldap_search (3) code=#{ldap_search.get_operation_result.code} error_message=#{ldap_search.get_operation_result.error_message} "
              fail(:invalid)
            end

            Rails.logger.info "ldap_search (4) user=#{ldap_bind_username}"

            ldap.auth ldap_bind_username, password

            Rails.logger.info "ldap bind (3) : ldap bind try."
            if ldap.bind
              Rails.logger.info "ldap bind (4) : ldap bind success."
              user = User.where(username: username).first
              unless user
                Rails.logger.info "ldap_bind (5) local user not found. create user=#{username}"
                # createuser
                filter = Net::LDAP::Filter.eq(SystemConfiguration.get("ldap.bind_column.username"), username)
                base = SystemConfiguration.get("ldap.basedn")
                ldap_users = ldap.search :base => base, :attribues => attrs, :return_result => true, :filter => filter
                unless ldap_users
                  fail(:invalid_login)
                else
                  user = create_user_and_agent!(username, password, ldap_user_cn, ldap_users.first)
                end
              end
              Rails.logger.info "ldap_bind (9) success."
              success!(user)
            else
              Rails.logger.info "ldap bind (10) : invalid ldap user. try local auth"

              resource = valid_password? && mapping.to.find_for_database_authentication(authentication_hash)

              if validate(resource){ resource.valid_password?(password) }
                resource.after_database_authentication
                success!(resource)
              elsif !halted?
                Rails.logger.info "ldap bind (11) : try local auth"
                fail(:invalid)
              end

              return
              #fail(:invalid_login)
            end
          else
            Rails.logger.info "ldap search (2) : auth try"
            bind_user = SystemConfiguration.get("ldap.account")
            bind_password = SystemConfiguration.get("ldap.password")

            ldap.auth bind_user, bind_password
            if ldap.bind
              filter = Net::LDAP::Filter.eq(SystemConfiguration.get("ldap.column.username"), username)
              basedn = SystemConfiguration.get("ldap.basedn")
              ldap_users = ldap.search :base => basedn, :attribues => attrs, :return_result => true, :filter => filter
              unless ldap_user
                fail(:invalid_login)
              else
                user = User.where(username: username).first
                unless user
                  user = create_user_and_agent!(ldap_users.first)
                end
              end
              success!(user)
            else
              fail(:invalid_login)
            end
          end
        end
      end

      def create_user_and_agent!(username, password, cn, ldap_user)
        columns = SystemConfiguration.get("ldap.bind_column")
        full_name_column = columns["full_name"]

        Rails.logger.info "create user : full_name_colmun=#{full_name_column}"
=begin
        ldap_user.each do |attribute, values|
          Rails.logger.info "create user :   #{attribute}:"
          values.each do |value|
            Rails.logger.info "create user :      --->#{value}"
          end
        end
        Rails.logger.info "  "
=end

        begin
          ActiveRecord::Base.transaction do
            agent = Agent.new
            agent.full_name = cn
            agent.save!

            user = User.new
            user.username = username
            user.password = password
            user.password_confirmation = password
            user.role = Role.find_by_name('User')
            user.function_class = FunctionClass.find_by_name('user')
            user.library = Library.first
            user.locale = I18n.default_locale.to_s
            user.agent = agent
            user.own_password = true
            user.save!
         end
        rescue => ex
          Rails.logger.fatal "err ex=#{ex}"
          Rails.logger.fatal $@.join("\n")
        end

        return user
      end

      def username
        params[:user][:username]
      end

      def password
        params[:user][:password]
      end

      def user_data
        {:username => username, :password => password, :password_confirmation => password}
      end

      def authentication_hash
        {:username => params[:user][:username]}
      end
    end
  end
end

Warden::Strategies.add(:ldap_authenticatable, Devise::Strategies::LdapAuthenticatable)

